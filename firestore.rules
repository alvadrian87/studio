rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Regla general de seguridad: denegar todo por defecto
    match /{document=**} {
      allow read, write: if false;
    }

    // Los usuarios pueden leer perfiles de otros, pero solo escribir en el suyo
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Cualquiera autenticado puede leer torneos, eventos, partidos e inscripciones
    match /tournaments/{tournamentId} {
      allow read: if request.auth != null;
      // Solo el creador o un admin puede escribir/borrar (simplificado, se puede usar un campo 'admins' o roles)
      allow write, delete: if request.auth != null && (resource.data.creatorId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    match /eventos/{eventId} {
       allow read: if request.auth != null;
       allow write, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /tournaments/{tournamentId}/inscriptions/{inscriptionId} {
       allow read: if request.auth != null;
       // La escritura se maneja a través de lógica del servidor/backend
       allow write: if request.auth != null;
    }

    match /matches/{matchId} {
        allow read: if request.auth != null;
        // Solo admins/lógica de servidor pueden actualizar partidos
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Reglas para Desafíos
    match /challenges/{challengeId} {
      allow read: if request.auth != null;
      // Cualquiera autenticado puede crear un desafío (la lógica de negocio se valida en el cliente/servidor)
      allow create: if request.auth != null;
      // Solo el desafiado puede actualizar (aceptar/rechazar)
      allow update: if request.auth != null && request.auth.uid == resource.data.desafiadoId;
    }

    // Reglas para Invitaciones de Dobles
    match /invitations/{invitationId} {
      // Leer si eres el que invita o el invitado
      allow read: if request.auth != null && (request.auth.uid == resource.data.invitadorId || request.auth.uid == resource.data.invitadoId);
      
      // Crear si eres el que invita y el estado es 'pendiente'
      allow create: if request.auth != null && request.auth.uid == request.resource.data.invitadorId && request.resource.data.estado == 'pendiente';
      
      // Actualizar si eres el invitado y solo cambias el estado
      allow update: if request.auth != null && request.auth.uid == resource.data.invitadoId && request.resource.data.keys().hasOnly(['estado']);
    }
  }
}
