
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    // Users: Can create their own profile, can only read/update their own profile. Admins can R/W anyone.
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read, update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Tournaments, Events: Public read, but only admins can write.
    match /tournaments/{tournamentId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /eventos/{eventId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Inscriptions: Public read, authenticated users can create. Only admin can delete.
    match /inscriptions/{inscriptionId} {
        allow read: if true;
        allow create: if request.auth != null;
        // Let's assume only admins can update/delete for now to avoid complex rules
        allow update, delete: if isAdmin();
    }

    // Challenges: Authenticated users can create/read. Only participants or admins can update.
    match /challenges/{challengeId} {
        allow read, create: if request.auth != null;
        allow update: if isAdmin() || request.auth.uid == resource.data.retadorId || request.auth.uid == resource.data.desafiadoId;
        allow delete: if isAdmin();
    }

    // Matches: Public read. Only participants or admin can update.
    match /matches/{matchId} {
      allow read: if true;
      allow create: if request.auth != null; // Challenges create matches
      allow update: if isAdmin() || request.auth.uid == resource.data.player1Id || request.auth.uid == resource.data.player2Id;
      allow delete: if isAdmin();
    }
  }
}
