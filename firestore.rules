
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if a tournament creator
    function isTournamentCreator(resource) {
        return request.auth.uid == resource.data.creatorId;
    }

    // Users collection
    match /users/{userId} {
      // Anyone authenticated can see the list of users and their profiles
      allow list, get: if request.auth != null;
      // Users can create their own profile document
      allow create: if isOwner(userId);
      // Users can only update their own profile, or an admin can update any profile
      allow update: if isOwner(userId) || isAdmin();
    }

    // Tournaments collection
    match /tournaments/{tournamentId} {
      // Anyone can see the list of tournaments and their details
      allow list, get: if true;
      // Only admins can create tournaments
      allow create: if isAdmin();
      // Only the tournament creator or an admin can update or delete it
      allow update, delete: if isTournamentCreator(resource) || isAdmin();
    }
    
    // Matches collection
    match /matches/{matchId} {
       // Anyone authenticated can view matches
      allow list, get: if request.auth != null;
      // Only participants of a match can create it (e.g. by accepting a challenge)
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.player1Id || request.auth.uid == request.resource.data.player2Id);
      // Only participants of a match can update its status (e.g., report winner)
      allow update: if request.auth != null && (request.auth.uid == resource.data.player1Id || request.auth.uid == resource.data.player2Id);
      // Only admins should be able to delete matches
      allow delete: if isAdmin();
    }
    
    // Challenges collection
    match /challenges/{challengeId} {
       // Anyone authenticated can view challenges they are part of
      allow list, get: if request.auth != null && (request.auth.uid == resource.data.challengerId || request.auth.uid == resource.data.challengedId);
      // Anyone authenticated can create a challenge
      allow create: if request.auth != null;
      // Only the challenged player can update the status (accept/reject)
      allow update: if request.auth != null && request.auth.uid == resource.data.challengedId;
       // Only admins or participants can delete a challenge
      allow delete: if isAdmin() || (request.auth != null && (request.auth.uid == resource.data.challengerId || request.auth.uid == resource.data.challengedId));
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Rules for avatar images
    match /avatars/{userId}/{allPaths=**} {
      // Allow read access to anyone (to see profile pictures)
      allow read: if true;
      // Allow write access (upload, update, delete) only to the user who owns the avatar
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
     // Rules for tournament banners - adjust as needed
    match /banners/{tournamentId}/{allPaths=**} {
      // Allow read access to anyone
      allow read: if true;
      // Allow write access only to admins or tournament creators. This is more complex to enforce here.
      // A simplified rule is to allow any authenticated user to upload, and manage access through your app's logic.
      // For stricter rules, you'd use Cloud Functions to verify creator/admin status.
      allow write: if request.auth != null;
    }
  }
}
