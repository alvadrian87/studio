
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId); // Allow user to create their own profile on signup
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Rules for 'tournaments' collection
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // Rules for 'eventos' (tournament events) collection
    match /eventos/{eventId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Rules for 'inscriptions' collection
    match /inscriptions/{inscriptionId} {
      // Anyone logged in can create an inscription (enroll in a tournament)
      allow create: if request.auth != null;
      // Only the user themselves or an admin can read/update/delete it
      allow read, update, delete: if isOwner(resource.data.jugadorId) || isAdmin();
    }
    
    // Rules for 'challenges'
    match /challenges/{challengeId} {
      allow read: if true;
      // A user must be logged in to create a challenge
      allow create: if request.auth != null && isOwner(request.resource.data.retadorId);
      // Only the challenger, the challenged person, or an admin can update it
      allow update: if isOwner(resource.data.retadorId) || isOwner(resource.data.desafiadoId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Rules for 'matches'
    match /matches/{matchId} {
      allow read: if true;
      // Matches are created via accepting a challenge, so this should be secure.
      // Let's restrict direct creation for now, can be done via a transaction/function
      allow create: if request.auth != null; // Or more specific logic
      // Only the players involved or an admin can update the match result
      allow update: if isOwner(resource.data.player1Id) || isOwner(resource.data.player2Id) || isAdmin();
      allow delete: if isAdmin();
    }
  }
}
