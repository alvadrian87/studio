rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUser(uid) {
      return request.auth.uid == uid;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read;
      allow create: if isUser(userId);
      allow update: if isUser(userId) || isAdmin();
    }
    
    match /tournaments/{tournamentId} {
      allow read;
      allow create, update, delete: if isAdmin();
    }
    
    match /tournaments/{tournamentId}/inscriptions/{inscriptionId} {
      allow read;
      allow create: if isUserAuthenticated();
      allow update: if isAdmin() || request.auth.uid in resource.data.jugadoresIds;
    }
    
    match /eventos/{eventId} {
        allow read;
        allow create, update, delete: if isAdmin();
    }
    
    match /matches/{matchId} {
        allow read;
        allow create: if isAdmin();
        allow update: if isAdmin();
    }
    
    match /challenges/{challengeId} {
        allow read;
        allow create: if isUserAuthenticated();
        allow update: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/tournaments/$(request.resource.data.torneoId)/inscriptions/$(request.resource.data.desafiadoId)).data.jugadoresIds;
    }
    
    match /invitations/{invitationId} {
        allow read;
        allow create: if isUserAuthenticated();
        allow update: if isUserAuthenticated() && (request.auth.uid == resource.data.invitadoId || request.auth.uid == resource.data.invitadorId);
    }
  }
}
